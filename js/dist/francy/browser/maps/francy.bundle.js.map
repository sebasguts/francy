{"version":3,"names":[],"mappings":"","sources":["francy.bundle.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function() {\n  var out$ = typeof exports != 'undefined' && exports || typeof define != 'undefined' && {} || this;\n\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" [<!ENTITY nbsp \"&#160;\">]>';\n\n  function isElement(obj) {\n    return obj instanceof HTMLElement || obj instanceof SVGElement;\n  }\n\n  function requireDomNode(el) {\n    if (!isElement(el)) {\n      throw new Error('an HTMLElement or SVGElement is required; got ' + el);\n    }\n  }\n\n  function isExternal(url) {\n    return url && url.lastIndexOf('http',0) == 0 && url.lastIndexOf(window.location.host) == -1;\n  }\n\n  function inlineImages(el, callback) {\n    requireDomNode(el);\n\n    var images = el.querySelectorAll('image'),\n        left = images.length,\n        checkDone = function() {\n          if (left === 0) {\n            callback();\n          }\n        };\n\n    checkDone();\n    for (var i = 0; i < images.length; i++) {\n      (function(image) {\n        var href = image.getAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\");\n        if (href) {\n          if (isExternal(href.value)) {\n            console.warn(\"Cannot render embedded images linking to external hosts: \"+href.value);\n            return;\n          }\n        }\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n        var img = new Image();\n        img.crossOrigin=\"anonymous\";\n        href = href || image.getAttribute('href');\n        if (href) {\n          img.src = href;\n          img.onload = function() {\n            canvas.width = img.width;\n            canvas.height = img.height;\n            ctx.drawImage(img, 0, 0);\n            image.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", canvas.toDataURL('image/png'));\n            left--;\n            checkDone();\n          }\n          img.onerror = function() {\n            console.log(\"Could not load \"+href);\n            left--;\n            checkDone();\n          }\n        } else {\n          left--;\n          checkDone();\n        }\n      })(images[i]);\n    }\n  }\n\n  function styles(el, options, cssLoadedCallback) {\n    var selectorRemap = options.selectorRemap;\n    var modifyStyle = options.modifyStyle;\n    var css = \"\";\n    // each font that has extranl link is saved into queue, and processed\n    // asynchronously\n    var fontsQueue = [];\n    var sheets = document.styleSheets;\n    for (var i = 0; i < sheets.length; i++) {\n      try {\n        var rules = sheets[i].cssRules;\n      } catch (e) {\n        console.warn(\"Stylesheet could not be loaded: \"+sheets[i].href);\n        continue;\n      }\n\n      if (rules != null) {\n        for (var j = 0, match; j < rules.length; j++, match = null) {\n          var rule = rules[j];\n          if (typeof(rule.style) != \"undefined\") {\n            var selectorText;\n\n            try {\n              selectorText = rule.selectorText;\n            } catch(err) {\n              console.warn('The following CSS rule has an invalid selector: \"' + rule + '\"', err);\n            }\n\n            try {\n              if (selectorText) {\n                match = el.querySelector(selectorText) || el.parentNode.querySelector(selectorText);\n              }\n            } catch(err) {\n              console.warn('Invalid CSS selector \"' + selectorText + '\"', err);\n            }\n\n            if (match) {\n              var selector = selectorRemap ? selectorRemap(rule.selectorText) : rule.selectorText;\n              var cssText = modifyStyle ? modifyStyle(rule.style.cssText) : rule.style.cssText;\n              css += selector + \" { \" + cssText + \" }\\n\";\n            } else if(rule.cssText.match(/^@font-face/)) {\n              // below we are trying to find matches to external link. E.g.\n              // @font-face {\n              //   // ...\n              //   src: local('Abel'), url(https://fonts.gstatic.com/s/abel/v6/UzN-iejR1VoXU2Oc-7LsbvesZW2xOQ-xsNqO47m55DA.woff2);\n              // }\n              //\n              // This regex will save extrnal link into first capture group\n              var fontUrlRegexp = /url\\([\"']?(.+?)[\"']?\\)/;\n              // TODO: This needs to be changed to support multiple url declarations per font.\n              var fontUrlMatch = rule.cssText.match(fontUrlRegexp);\n\n              var externalFontUrl = (fontUrlMatch && fontUrlMatch[1]) || '';\n              var fontUrlIsDataURI = externalFontUrl.match(/^data:/);\n              if (fontUrlIsDataURI) {\n                // We should ignore data uri - they are already embedded\n                externalFontUrl = '';\n              }\n\n              if (externalFontUrl) {\n                // okay, we are lucky. We can fetch this font later\n\n                //handle url if relative\n                if (externalFontUrl.startsWith('../')) {\n                  externalFontUrl = sheets[i].href + '/../' + externalFontUrl\n                } else if (externalFontUrl.startsWith('./')) {\n                  externalFontUrl = sheets[i].href + '/.' + externalFontUrl\n                }\n\n                fontsQueue.push({\n                  text: rule.cssText,\n                  // Pass url regex, so that once font is downladed, we can run `replace()` on it\n                  fontUrlRegexp: fontUrlRegexp,\n                  format: getFontMimeTypeFromUrl(externalFontUrl),\n                  url: externalFontUrl\n                });\n              } else {\n                // otherwise, use previous logic\n                css += rule.cssText + '\\n';\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Now all css is processed, it's time to handle scheduled fonts\n    processFontQueue(fontsQueue);\n\n    function getFontMimeTypeFromUrl(fontUrl) {\n      var supportedFormats = {\n        'woff2': 'font/woff2',\n        'woff': 'font/woff',\n        'otf': 'application/x-font-opentype',\n        'ttf': 'application/x-font-ttf',\n        'eot': 'application/vnd.ms-fontobject',\n        'sfnt': 'application/font-sfnt',\n        'svg': 'image/svg+xml'\n      };\n      var extensions = Object.keys(supportedFormats);\n      for (var i = 0; i < extensions.length; ++i) {\n        var extension = extensions[i];\n        // TODO: This is not bullet proof, it needs to handle edge cases...\n        if (fontUrl.indexOf('.' + extension) > 0) {\n          return supportedFormats[extension];\n        }\n      }\n\n      // If you see this error message, you probably need to update code above.\n      console.error('Unknown font format for ' + fontUrl+ '; Fonts may not be working correctly');\n      return 'application/octet-stream';\n    }\n\n    function processFontQueue(queue) {\n      if (queue.length > 0) {\n        // load fonts one by one until we have anything in the queue:\n        var font = queue.pop();\n        processNext(font);\n      } else {\n        // no more fonts to load.\n        cssLoadedCallback(css);\n      }\n\n      function processNext(font) {\n        // TODO: This could benefit from caching.\n        var oReq = new XMLHttpRequest();\n        oReq.addEventListener('load', fontLoaded);\n        oReq.addEventListener('error', transferFailed);\n        oReq.addEventListener('abort', transferFailed);\n        oReq.open('GET', font.url);\n        oReq.responseType = 'arraybuffer';\n        oReq.send();\n\n        function fontLoaded() {\n          // TODO: it may be also worth to wait until fonts are fully loaded before\n          // attempting to rasterize them. (e.g. use https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet )\n          var fontBits = oReq.response;\n          var fontInBase64 = arrayBufferToBase64(fontBits);\n          updateFontStyle(font, fontInBase64);\n        }\n\n        function transferFailed(e) {\n          console.warn('Failed to load font from: ' + font.url);\n          console.warn(e)\n          css += font.text + '\\n';\n          processFontQueue();\n        }\n\n        function updateFontStyle(font, fontInBase64) {\n          var dataUrl = 'url(\"data:' + font.format + ';base64,' + fontInBase64 + '\")';\n          css += font.text.replace(font.fontUrlRegexp, dataUrl) + '\\n';\n\n          // schedule next font download on next tick.\n          setTimeout(function() {\n            processFontQueue(queue)\n          }, 0);\n        }\n\n      }\n    }\n\n    function arrayBufferToBase64(buffer) {\n      var binary = '';\n      var bytes = new Uint8Array(buffer);\n      var len = bytes.byteLength;\n\n      for (var i = 0; i < len; i++) {\n          binary += String.fromCharCode(bytes[i]);\n      }\n\n      return window.btoa(binary);\n    }\n  }\n\n  function getDimension(el, clone, dim) {\n    var v = (el.viewBox && el.viewBox.baseVal && el.viewBox.baseVal[dim]) ||\n      (clone.getAttribute(dim) !== null && !clone.getAttribute(dim).match(/%$/) && parseInt(clone.getAttribute(dim))) ||\n      el.getBoundingClientRect()[dim] ||\n      parseInt(clone.style[dim]) ||\n      parseInt(window.getComputedStyle(el).getPropertyValue(dim));\n    return (typeof v === 'undefined' || v === null || isNaN(parseFloat(v))) ? 0 : v;\n  }\n\n  function reEncode(data) {\n    data = encodeURIComponent(data);\n    data = data.replace(/%([0-9A-F]{2})/g, function(match, p1) {\n      var c = String.fromCharCode('0x'+p1);\n      return c === '%' ? '%25' : c;\n    });\n    return decodeURIComponent(data);\n  }\n\n  out$.prepareSvg = function(el, options, cb) {\n    requireDomNode(el);\n\n    options = options || {};\n    options.scale = options.scale || 1;\n    options.responsive = options.responsive || false;\n    var xmlns = \"http://www.w3.org/2000/xmlns/\";\n\n    inlineImages(el, function() {\n      var outer = document.createElement(\"div\");\n      var clone = el.cloneNode(true);\n      var width, height;\n      if(el.tagName == 'svg') {\n        width = options.width || getDimension(el, clone, 'width');\n        height = options.height || getDimension(el, clone, 'height');\n      } else if(el.getBBox) {\n        var box = el.getBBox();\n        width = box.x + box.width;\n        height = box.y + box.height;\n        clone.setAttribute('transform', clone.getAttribute('transform').replace(/translate\\(.*?\\)/, ''));\n\n        var svg = document.createElementNS('http://www.w3.org/2000/svg','svg')\n        svg.appendChild(clone)\n        clone = svg;\n      } else {\n        console.error('Attempted to render non-SVG element', el);\n        return;\n      }\n\n      clone.setAttribute(\"version\", \"1.1\");\n      if (!clone.getAttribute('xmlns')) {\n        clone.setAttributeNS(xmlns, \"xmlns\", \"http://www.w3.org/2000/svg\");\n      }\n      if (!clone.getAttribute('xmlns:xlink')) {\n        clone.setAttributeNS(xmlns, \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n      }\n\n      if (options.responsive) {\n        clone.removeAttribute('width');\n        clone.removeAttribute('height');\n        clone.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n      } else {\n        clone.setAttribute(\"width\", width * options.scale);\n        clone.setAttribute(\"height\", height * options.scale);\n      }\n\n      clone.setAttribute(\"viewBox\", [\n        options.left || 0,\n        options.top || 0,\n        width,\n        height\n      ].join(\" \"));\n\n      var fos = clone.querySelectorAll('foreignObject > *');\n      for (var i = 0; i < fos.length; i++) {\n        if (!fos[i].getAttribute('xmlns')) {\n          fos[i].setAttributeNS(xmlns, \"xmlns\", \"http://www.w3.org/1999/xhtml\");\n        }\n      }\n\n      outer.appendChild(clone);\n\n      // In case of custom fonts we need to fetch font first, and then inline\n      // its url into data-uri format (encode as base64). That's why style\n      // processing is done asynchonously. Once all inlining is finshed\n      // cssLoadedCallback() is called.\n      styles(el, options, cssLoadedCallback);\n\n      function cssLoadedCallback(css) {\n        // here all fonts are inlined, so that we can render them properly.\n        var s = document.createElement('style');\n        s.setAttribute('type', 'text/css');\n        s.innerHTML = \"<![CDATA[\\n\" + css + \"\\n]]>\";\n        var defs = document.createElement('defs');\n        defs.appendChild(s);\n        clone.insertBefore(defs, clone.firstChild);\n\n        if (cb) {\n          var outHtml = outer.innerHTML;\n          outHtml = outHtml.replace(/NS\\d+:href/gi, 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href');\n          cb(outHtml, width, height);\n        }\n      }\n    });\n  }\n\n  out$.svgAsDataUri = function(el, options, cb) {\n    out$.prepareSvg(el, options, function(svg) {\n      var uri = 'data:image/svg+xml;base64,' + window.btoa(reEncode(doctype + svg));\n      if (cb) {\n        cb(uri);\n      }\n    });\n  }\n\n  out$.svgAsPngUri = function(el, options, cb) {\n    requireDomNode(el);\n\n    options = options || {};\n    options.encoderType = options.encoderType || 'image/png';\n    options.encoderOptions = options.encoderOptions || 0.8;\n\n    var convertToPng = function(src, w, h) {\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = w;\n      canvas.height = h;\n\n      if(options.canvg) {\n        options.canvg(canvas, src);\n      } else {\n        context.drawImage(src, 0, 0);\n      }\n\n      if(options.backgroundColor){\n        context.globalCompositeOperation = 'destination-over';\n        context.fillStyle = options.backgroundColor;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n      }\n\n      var png;\n      try {\n        png = canvas.toDataURL(options.encoderType, options.encoderOptions);\n      } catch (e) {\n        if ((typeof SecurityError !== 'undefined' && e instanceof SecurityError) || e.name == \"SecurityError\") {\n          console.error(\"Rendered SVG images cannot be downloaded in this browser.\");\n          return;\n        } else {\n          throw e;\n        }\n      }\n      cb(png);\n    }\n\n    if(options.canvg) {\n      out$.prepareSvg(el, options, convertToPng);\n    } else {\n      out$.svgAsDataUri(el, options, function(uri) {\n        var image = new Image();\n\n        image.onload = function() {\n          convertToPng(image, image.width, image.height);\n        }\n\n        image.onerror = function() {\n          console.error(\n            'There was an error loading the data URI as an image on the following SVG\\n',\n            window.atob(uri.slice(26)), '\\n',\n            \"Open the following link to see browser's diagnosis\\n\",\n            uri);\n        }\n\n        image.src = uri;\n      });\n    }\n  }\n\n  out$.download = function(name, uri) {\n    if (navigator.msSaveOrOpenBlob) {\n      navigator.msSaveOrOpenBlob(uriToBlob(uri), name);\n    } else {\n      var saveLink = document.createElement('a');\n      var downloadSupported = 'download' in saveLink;\n      if (downloadSupported) {\n        saveLink.download = name;\n        saveLink.style.display = 'none';\n        document.body.appendChild(saveLink);\n        try {\n          var blob = uriToBlob(uri);\n          var url = URL.createObjectURL(blob);\n          saveLink.href = url;\n          saveLink.onclick = function() {\n            requestAnimationFrame(function() {\n              URL.revokeObjectURL(url);\n            })\n          };\n        } catch (e) {\n          console.warn('This browser does not support object URLs. Falling back to string URL.');\n          saveLink.href = uri;\n        }\n        saveLink.click();\n        document.body.removeChild(saveLink);\n      }\n      else {\n        window.open(uri, '_temp', 'menubar=no,toolbar=no,status=no');\n      }\n    }\n  }\n\n  function uriToBlob(uri) {\n    var byteString = window.atob(uri.split(',')[1]);\n    var mimeString = uri.split(',')[0].split(':')[1].split(';')[0]\n    var buffer = new ArrayBuffer(byteString.length);\n    var intArray = new Uint8Array(buffer);\n    for (var i = 0; i < byteString.length; i++) {\n      intArray[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([buffer], {type: mimeString});\n  }\n\n  out$.saveSvg = function(el, name, options) {\n    requireDomNode(el);\n\n    options = options || {};\n    out$.svgAsDataUri(el, options, function(uri) {\n      out$.download(name, uri);\n    });\n  }\n\n  out$.saveSvgAsPng = function(el, name, options) {\n    requireDomNode(el);\n\n    options = options || {};\n    out$.svgAsPngUri(el, options, function(uri) {\n      out$.download(name, uri);\n    });\n  }\n\n  // if define is defined create as an AMD module\n  if (typeof define !== 'undefined') {\n    define(function() {\n      return out$;\n    });\n  }\n\n})();\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requires = requires;\nfunction requires(props) {\n  return function decorator(target, name, descriptor) {\n    var oldValue = descriptor.value;\n\n    descriptor.value = function () {\n      if (!hasData(getProperty(this.data, props))) {\n        this.logger.debug('No data here [' + props + '], nothing to render... continuing...');\n        return;\n      }\n      return oldValue.apply(this, arguments);\n    };\n\n    return descriptor;\n  };\n}\n\nfunction getProperty(obj, propertyPath) {\n\n  var tmp = obj;\n\n  if (tmp && propertyPath) {\n    var properties = propertyPath.split('.');\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var property = _step.value;\n\n        if (!tmp.hasOwnProperty(property)) {\n          tmp = undefined;\n          break;\n        } else {\n          tmp = tmp[property];\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return tmp;\n}\n\nfunction hasData(obj) {\n  return obj && (obj instanceof Array && obj.length || obj instanceof Object && Object.values(obj).length);\n}\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _frame = require('./render/frame');\n\nvar _frame2 = _interopRequireDefault(_frame);\n\nvar _renderer = require('./render/renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n//import Tracker from './tracker/change';\n\nvar ALL_CANVAS = {};\n\n/* global d3 */\n\n/**\n * Francy is the main entry point for the whole framework. By passing an input string/object to the {Francy.handle} function,\n * Francy will handle the creation of that json as long it is a valid and understandable json object to Francy.\n * @access public\n * \n * @version 0.5.0\n * \n * @example\n * let francy = new Francy({verbose: true, appendTo: '#div-id', callbackHandler: console.log});\n * francy.load(json).render();\n */\n\nvar Francy = function (_Renderer) {\n  _inherits(Francy, _Renderer);\n\n  /**\n   * Creates an instance of Francy with the following options:\n   * @typedef {Object} Options\n   * @property {Boolean} verbose prints extra log information to console.log, default false\n   * @property {Boolean} appendTo where the generated html/svg components will be attached to, default body\n   * @property {Function} callbackHandler this handler will be used to invoke actions from the menu, default console.log\n   */\n  function Francy(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Francy);\n\n    var _this = _possibleConstructorReturn(this, (Francy.__proto__ || Object.getPrototypeOf(Francy)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n\n    if (!d3) {\n      throw new Error('D3 is not imported! Francy won\\'t work without it... please import D3 v4+.');\n    }\n    return _this;\n  }\n\n  /**\n   * Main entry point. Calling render passing a json representation string will \n   * trigger the drawing of a json object.\n   * @returns {Object} the html element created\n   */\n\n\n  _createClass(Francy, [{\n    key: 'render',\n    value: function render() {\n      //var tracker = new Tracker(json, this.options);\n      //tracker.subscribe(function(obj) { console.log(obj); });\n      //return new Draw(this.options).handle(tracker.object);\n      var frame = new _frame2.default(this.options).load(this.data).render();\n      ALL_CANVAS[this.data.canvas.id] = frame;\n      return frame.element.node();\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender(id) {\n      delete ALL_CANVAS[id];\n    }\n  }]);\n\n  return Francy;\n}(_renderer2.default);\n\nexports.default = Francy;\n\n\ntry {\n  exports.Francy = window.Francy = Francy;\n  // handle events on resize\n  var oldResize = window.onresize;\n  window.onresize = function () {\n    // zoom to fit all canvas on resize\n    Object.values(ALL_CANVAS).forEach(function (frame) {\n      frame.canvas.zoomToFit();\n    });\n    // call old resize function if any!\n    if (typeof oldResize === 'function') {\n      oldResize();\n    }\n  };\n} catch (e) {\n  exports.Francy = Francy;\n}\n\n},{\"./render/frame\":12,\"./render/renderer\":22}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = require('../util/logger');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _jsonUtils = require('../util/json-utils');\n\nvar _jsonUtils2 = _interopRequireDefault(_jsonUtils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Base = function () {\n  function Base(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Base);\n\n    this.settings({ verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler });\n    /**\n     * @type {Logger} the logger for this class\n     */\n    this.log = new _logger2.default(this.options);\n  }\n\n  _createClass(Base, [{\n    key: 'settings',\n    value: function settings(_ref2) {\n      var verbose = _ref2.verbose,\n          appendTo = _ref2.appendTo,\n          callbackHandler = _ref2.callbackHandler;\n\n      if (!callbackHandler) {\n        throw new Error('A Callback Handler must be provided! This will be used to trigger events from the graphics produced...');\n      }\n      if (!appendTo) {\n        throw new Error('Missing an element or id to append the graphics to...!');\n      }\n      /**\n       * @typedef {Object} Options\n       * @property {Boolean} verbose prints extra log information to console.log, default false\n       * @property {Boolean} appendTo where the generated html/svg components will be attached to, default body\n       * @property {Function} callbackHandler this handler will be used to invoke actions from the menu, default console.log\n       */\n      this.options = {};\n      this.options.verbose = verbose || this.options.verbose;\n      this.options.appendTo = appendTo || this.options.verbose;\n      this.options.callbackHandler = callbackHandler || this.options.callbackHandler;\n      return this;\n    }\n  }, {\n    key: 'load',\n    value: function load(json, partial) {\n      var data = _jsonUtils2.default.parse(json, partial);\n      if (data) {\n        this.data = data;\n      }\n      return this;\n    }\n  }, {\n    key: 'logger',\n    get: function get() {\n      return this.log;\n    }\n  }]);\n\n  return Base;\n}();\n\nexports.default = Base;\n\n},{\"../util/json-utils\":25,\"../util/logger\":26}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dec, _desc, _value, _class;\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _modalRequired = require('./modal-required');\n\nvar _modalRequired2 = _interopRequireDefault(_modalRequired);\n\nvar _data = require('../decorator/data');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nvar CallbackHandler = (_dec = (0, _data.requires)('callback'), (_class = function (_Base) {\n  _inherits(CallbackHandler, _Base);\n\n  function CallbackHandler(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, CallbackHandler);\n\n    var _this = _possibleConstructorReturn(this, (CallbackHandler.__proto__ || Object.getPrototypeOf(CallbackHandler)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n\n    _this.callback = callbackHandler;\n    return _this;\n  }\n\n  _createClass(CallbackHandler, [{\n    key: 'execute',\n    value: function execute() {\n      var _this2 = this;\n\n      if (Object.keys(this.data.callback.requiredArgs).length) {\n        var options = this.options;\n        options.callbackHandler = function (calbackObj) {\n          return _this2._execute.call(_this2, calbackObj);\n        };\n        return new _modalRequired2.default(options).load(this.data, true).render();\n      } else {\n        // Trigger is the expected command on GAP for this events!\n        this._execute(this.data.callback);\n      }\n    }\n  }, {\n    key: '_execute',\n    value: function _execute(calbackObj) {\n      this.callback('Trigger(' + JSON.stringify(JSON.stringify(calbackObj)) + ');');\n    }\n  }]);\n\n  return CallbackHandler;\n}(_base2.default), (_applyDecoratedDescriptor(_class.prototype, 'execute', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'execute'), _class.prototype)), _class));\nexports.default = CallbackHandler;\n\n},{\"../decorator/data\":2,\"./base\":4,\"./modal-required\":21}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dec, _desc, _value, _class;\n\nvar _composite = require('./composite');\n\nvar _composite2 = _interopRequireDefault(_composite);\n\nvar _graph = require('./graph');\n\nvar _graph2 = _interopRequireDefault(_graph);\n\nvar _chart = require('./chart');\n\nvar _chart2 = _interopRequireDefault(_chart);\n\nvar _data = require('../decorator/data');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/* global d3 */\n\nvar Canvas = (_dec = (0, _data.requires)('canvas'), (_class = function (_Composite) {\n  _inherits(Canvas, _Composite);\n\n  function Canvas(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Canvas);\n\n    var _this = _possibleConstructorReturn(this, (Canvas.__proto__ || Object.getPrototypeOf(Canvas)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n\n    _this.graph = new _graph2.default(_this.options);\n    _this.chart = new _chart2.default(_this.options);\n    _this.add(_this.graph).add(_this.chart);\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: 'render',\n    value: function render() {\n      var parent = this.options.appendTo.element;\n      var self = this;\n\n      function updateZoom(translateX, translateY, scale) {\n        self.element.call(zoom.transform, d3.zoomIdentity.translate(translateX, translateY).scale(scale, scale));\n      }\n\n      function zoomed() {\n        content.attr(\"transform\", d3.event.transform);\n      }\n\n      function stopped() {\n        if (d3.event.defaultPrevented) {\n          d3.event.stopPropagation();\n        }\n      }\n\n      function zoomToFit() {\n        // only execute if enable, of course\n        if (self.data.canvas.zoomToFit) {\n          var bounds = content.node().getBBox();\n\n          var clientBounds = self.element.node().getBoundingClientRect(),\n              fullWidth = clientBounds.right - clientBounds.left,\n              fullHeight = clientBounds.bottom - clientBounds.top;\n\n          var width = bounds.width,\n              height = bounds.height;\n\n          if (width == 0 || height == 0) return;\n\n          var midX = bounds.x + width / 2,\n              midY = bounds.y + height / 2;\n\n          var scale = 0.9 / Math.max(width / fullWidth, height / fullHeight);\n          var translateX = fullWidth / 2 - scale * midX,\n              translateY = fullHeight / 2 - scale * midY;\n\n          content.transition().duration(self.transitionDuration).attr('transform', 'translate(' + translateX + ',' + translateY + ')scale(' + scale + ',' + scale + ')').on('end', function () {\n            return updateZoom(translateX, translateY, scale);\n          });\n        }\n      }\n\n      var canvasId = 'Canvas-' + this.data.canvas.id;\n      this.element = d3.select('svg#' + canvasId);\n      // check if the canvas is already present\n      if (!this.element.node()) {\n        // create a svg element detached from the DOM!\n        this.logger.debug('Creating Canvas [' + canvasId + ']...');\n        this.element = parent.append('svg').attr('class', 'francy-canvas').attr('id', canvasId);\n      }\n\n      // cannot continue if canvas is not present\n      if (!this.element.node()) {\n        throw new Error('Oops, could not create canvas with id [' + canvasId + ']... Cannot proceed.');\n      }\n\n      this.element.attr('width', this.data.canvas.width).attr('height', this.data.canvas.height);\n\n      var zoom = d3.zoom();\n\n      var content = this.element.select('g.francy-content');\n\n      if (!content.node()) {\n        content = this.element.append('g').attr('class', 'francy-content');\n        zoom.on(\"zoom\", zoomed);\n        // remove zoom on double click!\n        this.element.call(zoom).on(\"dblclick.zoom\", null);\n      }\n\n      this.element.on(\"click\", stopped, true);\n\n      this.element.zoomToFit = this.zoomToFit = zoomToFit;\n\n      this.logger.debug('Canvas updated [' + canvasId + ']...');\n\n      this.renderChildren();\n\n      setTimeout(function () {\n        zoomToFit();\n      }, this.transitionDuration);\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }]);\n\n  return Canvas;\n}(_composite2.default), (_applyDecoratedDescriptor(_class.prototype, 'render', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'render'), _class.prototype)), _class));\nexports.default = Canvas;\n\n},{\"../decorator/data\":2,\"./chart\":10,\"./composite\":11,\"./graph\":15}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _tooltip = require('./tooltip');\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _chart = require('./chart');\n\nvar _chart2 = _interopRequireDefault(_chart);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* global d3 */\n\nvar BarChart = function (_Renderer) {\n  _inherits(BarChart, _Renderer);\n\n  function BarChart(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, BarChart);\n\n    return _possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(BarChart, [{\n    key: 'render',\n    value: function render() {\n\n      var parent = this.options.appendTo.element;\n\n      var tooltip = new _tooltip2.default(this.options);\n\n      var axis = this.data.canvas.chart.axis,\n          datasets = this.data.canvas.chart.data,\n          datasetNames = Object.keys(datasets);\n\n      this.element = parent.select('g.francy-content');\n\n      var margin = { top: 50, right: 50, bottom: 50, left: 50 },\n          width = +parent.attr('width') || d3.select('body').node().getBoundingClientRect().width,\n          height = +parent.attr('height') || d3.select('body').node().getBoundingClientRect().height;\n\n      // set the dimensions and margins of the chart\n      width = width - margin.left - margin.right;\n      height = height - margin.top - margin.bottom;\n\n      // set the ranges\n      var x = d3.scaleBand().range([0, width]).padding(0.1).domain(axis.x.domain);\n      var y = d3.scaleLinear().range([height, 0]).domain(axis.y.domain);\n\n      var tmp = [];\n      datasetNames.forEach(function (key) {\n        return tmp = tmp.concat(datasets[key]);\n      });\n\n      if (!axis.y.domain.length) {\n        y.domain([0, d3.max(tmp, function (d) {\n          return d;\n        })]);\n      }\n\n      if (!axis.x.domain.length) {\n        axis.x.domain = _chart2.default.domainRange(tmp.length / datasetNames.length);\n        x.domain(axis.x.domain);\n      }\n\n      var barsGroup = this.element.selectAll('g.francy-bars');\n\n      if (!barsGroup.node()) {\n        barsGroup = this.element.append('g').attr('class', 'francy-bars');\n      }\n\n      datasetNames.forEach(function (key, index) {\n        var bar = barsGroup.selectAll('.francy-bar-' + index).data(datasets[key]);\n\n        bar.exit().transition().duration(750).style(\"fill-opacity\", 1e-6).remove();\n\n        // append the rectangles for the bar chart\n        var barEnter = bar.enter().append('rect').style('fill', function () {\n          return _chart2.default.colors(index * 5);\n        }).attr('class', 'francy-bar-' + index).attr('x', function (d, i) {\n          return x(axis.x.domain[i]) + index * (x.bandwidth() / datasetNames.length);\n        }).attr('width', x.bandwidth() / datasetNames.length - 1).attr('y', function (d) {\n          return y(d);\n        }).attr('height', function (d) {\n          return height - y(d);\n        }).on(\"mouseenter\", function (d) {\n          d3.select(this).transition().duration(250).style(\"fill-opacity\", 0.5);\n          tooltip.load(_chart2.default.tooltip(key, d), true).render();\n        }).on(\"mouseleave\", function () {\n          d3.select(this).transition().duration(250).style(\"fill-opacity\", 1);\n          tooltip.unrender();\n        });\n\n        barEnter.merge(bar).attr('x', function (d, i) {\n          return x(axis.x.domain[i]) + index * (x.bandwidth() / datasetNames.length);\n        }).attr('width', x.bandwidth() / datasetNames.length - 1).attr('y', function (d) {\n          return y(d);\n        }).attr('height', function (d) {\n          return height - y(d);\n        });\n      });\n\n      // force rebuild axis again\n      var xAxisGroup = this.element.selectAll('g.francy-x-axis');\n\n      if (!xAxisGroup.node()) {\n        xAxisGroup = this.element.append('g').attr('class', 'francy-x-axis');\n      }\n\n      xAxisGroup.selectAll('*').remove();\n\n      // add the x Axis\n      xAxisGroup.attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)).append('text').attr('dy', 50).attr('dx', width / 2).attr('fill', 'black').attr('class', 'francy-axis').style('text-anchor', 'end').text(axis.x.title);\n\n      // force rebuild axis again\n      var yAxisGroup = this.element.selectAll('g.francy-y-axis');\n\n      if (!yAxisGroup.node()) {\n        yAxisGroup = this.element.append('g').attr('class', 'francy-y-axis');\n      }\n\n      yAxisGroup.selectAll('*').remove();\n\n      // add the y Axis\n      yAxisGroup.call(d3.axisLeft(y)).append('text').attr('dx', -50).attr('dy', height / 2).attr('fill', 'black').attr('class', 'francy-axis').style('text-anchor', 'end').text(axis.y.title);\n\n      if (this.data.canvas.chart.showLegend) {\n\n        var legendGroup = this.element.selectAll('.francy-legend');\n\n        if (!legendGroup.node()) {\n          legendGroup = this.element.append('g').attr('class', 'francy-legend');\n        }\n\n        // force rebuild legend again\n        legendGroup.selectAll('*').remove();\n\n        var legend = legendGroup.selectAll('g').data(datasetNames.slice());\n\n        legend.exit().remove();\n\n        legend = legend.enter().append('g').attr('transform', function (d, i) {\n          return 'translate(0,' + i * 20 + ')';\n        }).merge(legend);\n\n        legend.append('rect').attr('x', width + 20).attr('width', 19).attr('height', 19).style('fill', function (d, i) {\n          return _chart2.default.colors(i * 5);\n        });\n\n        legend.append('text').attr('x', width + 80).attr('y', 9).attr('dy', '.35em').style('text-anchor', 'end').text(function (d) {\n          return d;\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }]);\n\n  return BarChart;\n}(_renderer2.default);\n\nexports.default = BarChart;\n\n},{\"./chart\":10,\"./renderer\":22,\"./tooltip\":23}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _tooltip = require('./tooltip');\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _chart = require('./chart');\n\nvar _chart2 = _interopRequireDefault(_chart);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* global d3 */\n\nvar LineChart = function (_Renderer) {\n  _inherits(LineChart, _Renderer);\n\n  function LineChart(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, LineChart);\n\n    return _possibleConstructorReturn(this, (LineChart.__proto__ || Object.getPrototypeOf(LineChart)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(LineChart, [{\n    key: 'render',\n    value: function render() {\n\n      var tooltip = new _tooltip2.default(this.options);\n\n      var parent = this.options.appendTo.element;\n\n      var axis = this.data.canvas.chart.axis,\n          datasets = this.data.canvas.chart.data,\n          datasetNames = Object.keys(datasets);\n\n      this.element = parent.select('g.francy-content');\n\n      var margin = { top: 50, right: 50, bottom: 50, left: 50 },\n          width = +parent.attr('width') || d3.select('body').node().getBoundingClientRect().width,\n          height = +parent.attr('height') || d3.select('body').node().getBoundingClientRect().height;\n\n      // set the dimensions and margins of the chart\n      width = width - margin.left - margin.right;\n      height = height - margin.top - margin.bottom;\n\n      // set the ranges\n      var x = d3.scaleLinear().range([0, width]).domain(axis.x.domain);\n      var y = d3.scaleLinear().range([height, 0]).domain(axis.y.domain);\n\n      var tmp = [];\n      datasetNames.forEach(function (key) {\n        return tmp = tmp.concat(datasets[key]);\n      });\n\n      if (!axis.y.domain.length) {\n        y.domain([0, d3.max(tmp, function (d) {\n          return d;\n        })]);\n      }\n\n      if (!axis.x.domain.length) {\n        x.domain([0, tmp.length / datasetNames.length]);\n      }\n\n      var linesGroup = this.element.selectAll('g.francy-lines');\n\n      if (!linesGroup.node()) {\n        linesGroup = this.element.append('g').attr('class', 'francy-lines');\n      }\n\n      datasetNames.forEach(function (key, index) {\n        var valueLine = d3.line().x(function (d, i) {\n          return x(i);\n        }).y(function (d) {\n          return y(d);\n        });\n\n        var line = linesGroup.selectAll('.francy-line-' + index).data([datasets[key]]);\n\n        line.exit().transition().duration(750).style(\"fill-opacity\", 1e-6).remove();\n\n        // append the rectangles for the bar chart\n        var lineEnter = line.enter().append('path').style('stroke', function () {\n          return _chart2.default.colors(index * 5);\n        }).style('stroke-width', '5px').attr('class', 'francy-line-' + index).attr('d', valueLine).on(\"mouseenter\", function (d) {\n          d3.select(this).transition().duration(250).style(\"stroke-opacity\", 0.5).style('stroke-width', '10px');\n          tooltip.load(_chart2.default.tooltip(key, d), true).render();\n        }).on(\"mouseleave\", function () {\n          d3.select(this).transition().duration(250).style(\"stroke-opacity\", 1).style('stroke-width', '5px');\n          tooltip.unrender();\n        });\n\n        lineEnter.merge(line);\n      });\n\n      // force rebuild axis again\n      var xAxisGroup = this.element.selectAll('g.francy-x-axis');\n\n      if (!xAxisGroup.node()) {\n        xAxisGroup = this.element.append('g').attr('class', 'francy-x-axis');\n      }\n\n      xAxisGroup.selectAll('*').remove();\n\n      // add the x Axis\n      xAxisGroup.attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)).append('text').attr('dy', 50).attr('dx', width / 2).attr('fill', 'black').attr('class', 'francy-axis').style('text-anchor', 'end').text(axis.x.title);\n\n      // force rebuild axis again\n      var yAxisGroup = this.element.selectAll('g.francy-y-axis');\n\n      if (!yAxisGroup.node()) {\n        yAxisGroup = this.element.append('g').attr('class', 'francy-y-axis');\n      }\n\n      yAxisGroup.selectAll('*').remove();\n\n      // add the y Axis\n      yAxisGroup.call(d3.axisLeft(y)).append('text').attr('dx', -50).attr('dy', height / 2).attr('fill', 'black').attr('class', 'francy-axis').style('text-anchor', 'end').text(axis.y.title);\n\n      if (this.data.canvas.chart.showLegend) {\n\n        var legendGroup = this.element.selectAll('.francy-legend');\n\n        if (!legendGroup.node()) {\n          legendGroup = this.element.append('g').attr('class', 'francy-legend');\n        }\n\n        // force rebuild legend again\n        legendGroup.selectAll('*').remove();\n\n        var legend = legendGroup.selectAll('g').data(datasetNames.slice());\n\n        legend.exit().remove();\n\n        legend = legend.enter().append('g').attr('transform', function (d, i) {\n          return 'translate(0,' + i * 20 + ')';\n        }).merge(legend);\n\n        legend.append('rect').attr('x', width + 20).attr('width', 19).attr('height', 19).style('fill', function (d, i) {\n          return _chart2.default.colors(i * 5);\n        });\n\n        legend.append('text').attr('x', width + 80).attr('y', 9).attr('dy', '.35em').style('text-anchor', 'end').text(function (d) {\n          return d;\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }]);\n\n  return LineChart;\n}(_renderer2.default);\n\nexports.default = LineChart;\n\n},{\"./chart\":10,\"./renderer\":22,\"./tooltip\":23}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _tooltip = require('./tooltip');\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _chart = require('./chart');\n\nvar _chart2 = _interopRequireDefault(_chart);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* global d3 */\n\nvar ScatterChart = function (_Renderer) {\n  _inherits(ScatterChart, _Renderer);\n\n  function ScatterChart(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, ScatterChart);\n\n    return _possibleConstructorReturn(this, (ScatterChart.__proto__ || Object.getPrototypeOf(ScatterChart)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(ScatterChart, [{\n    key: 'render',\n    value: function render() {\n\n      var tooltip = new _tooltip2.default(this.options);\n\n      var parent = this.options.appendTo.element;\n\n      var axis = this.data.canvas.chart.axis,\n          datasets = this.data.canvas.chart.data,\n          datasetNames = Object.keys(datasets);\n\n      this.element = parent.select('g.francy-content');\n\n      var margin = { top: 50, right: 50, bottom: 50, left: 50 },\n          width = +parent.attr('width') || d3.select('body').node().getBoundingClientRect().width,\n          height = +parent.attr('height') || d3.select('body').node().getBoundingClientRect().height;\n\n      // set the dimensions and margins of the chart\n      width = width - margin.left - margin.right;\n      height = height - margin.top - margin.bottom;\n\n      // set the ranges\n      var x = d3.scaleLinear().range([0, width]).domain(axis.x.domain);\n      var y = d3.scaleLinear().range([height, 0]).domain(axis.y.domain);\n\n      var tmp = [];\n      datasetNames.forEach(function (key) {\n        return tmp = tmp.concat(datasets[key]);\n      });\n\n      if (!axis.y.domain.length) {\n        y.domain([0, d3.max(tmp, function (d) {\n          return d;\n        })]);\n      }\n\n      if (!axis.x.domain.length) {\n        x.domain([0, tmp.length / datasetNames.length]);\n      }\n\n      var scatterGroup = this.element.selectAll('g.francy-scatters');\n\n      if (!scatterGroup.node()) {\n        scatterGroup = this.element.append('g').attr('class', 'francy-scatters');\n      }\n\n      datasetNames.forEach(function (key, index) {\n        var scatter = scatterGroup.selectAll('.francy-scatter-' + index).data(datasets[key]);\n\n        scatter.exit().transition().duration(750).style(\"fill-opacity\", 1e-6).remove();\n\n        // append the rectangles for the bar chart\n        var scatterEnter = scatter.enter().append('circle').style('fill', function () {\n          return _chart2.default.colors(index * 5);\n        }).attr('class', 'francy-scatter-' + index).attr(\"r\", 5).attr(\"cx\", function (d, i) {\n          return x(i);\n        }).attr(\"cy\", function (d) {\n          return y(d);\n        }).on(\"mouseenter\", function (d) {\n          d3.select(this).transition().duration(250).style(\"fill-opacity\", 0.5).attr('r', 10);\n          tooltip.load(_chart2.default.tooltip(key, d), true).render();\n        }).on(\"mouseleave\", function () {\n          d3.select(this).transition().duration(250).style(\"fill-opacity\", 1).attr('r', 5);\n          tooltip.unrender();\n        });\n\n        scatterEnter.merge(scatter);\n      });\n\n      // force rebuild axis again\n      var xAxisGroup = this.element.selectAll('g.francy-x-axis');\n\n      if (!xAxisGroup.node()) {\n        xAxisGroup = this.element.append('g').attr('class', 'francy-x-axis');\n      }\n\n      xAxisGroup.selectAll('*').remove();\n\n      // add the x Axis\n      xAxisGroup.attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)).append('text').attr('dy', 50).attr('dx', width / 2).attr('fill', 'black').attr('class', 'francy-axis').style('text-anchor', 'end').text(axis.x.title);\n\n      // force rebuild axis again\n      var yAxisGroup = this.element.selectAll('g.francy-y-axis');\n\n      if (!yAxisGroup.node()) {\n        yAxisGroup = this.element.append('g').attr('class', 'francy-y-axis');\n      }\n\n      yAxisGroup.selectAll('*').remove();\n\n      // add the y Axis\n      yAxisGroup.call(d3.axisLeft(y)).append('text').attr('dx', -50).attr('dy', height / 2).attr('fill', 'black').attr('class', 'francy-axis').style('text-anchor', 'end').text(axis.y.title);\n\n      if (this.data.canvas.chart.showLegend) {\n\n        var legendGroup = this.element.selectAll('.francy-legend');\n\n        if (!legendGroup.node()) {\n          legendGroup = this.element.append('g').attr('class', 'francy-legend');\n        }\n\n        // force rebuild legend again\n        legendGroup.selectAll('*').remove();\n\n        var legend = legendGroup.selectAll('g').data(datasetNames.slice());\n\n        legend.exit().remove();\n\n        legend = legend.enter().append('g').attr('transform', function (d, i) {\n          return 'translate(0,' + i * 20 + ')';\n        }).merge(legend);\n\n        legend.append('rect').attr('x', width + 20).attr('width', 19).attr('height', 19).style('fill', function (d, i) {\n          return _chart2.default.colors(i * 5);\n        });\n\n        legend.append('text').attr('x', width + 80).attr('y', 9).attr('dy', '.35em').style('text-anchor', 'end').text(function (d) {\n          return d;\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }]);\n\n  return ScatterChart;\n}(_renderer2.default);\n\nexports.default = ScatterChart;\n\n},{\"./chart\":10,\"./renderer\":22,\"./tooltip\":23}],10:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dec, _desc, _value, _class;\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _chartBar = require('./chart-bar');\n\nvar _chartBar2 = _interopRequireDefault(_chartBar);\n\nvar _chartLine = require('./chart-line');\n\nvar _chartLine2 = _interopRequireDefault(_chartLine);\n\nvar _chartScatter = require('./chart-scatter');\n\nvar _chartScatter2 = _interopRequireDefault(_chartScatter);\n\nvar _data = require('../decorator/data');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/* global d3 */\n\nvar Chart = (_dec = (0, _data.requires)('canvas.chart'), (_class = function (_Renderer) {\n  _inherits(Chart, _Renderer);\n\n  function Chart(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Chart);\n\n    return _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(Chart, [{\n    key: 'render',\n    value: function render() {\n\n      switch (this.data.canvas.chart.type) {\n        case \"bar\":\n          this.element = new _chartBar2.default(this.options).load(this.data).render();\n          break;\n        case \"line\":\n          this.element = new _chartLine2.default(this.options).load(this.data).render();\n          break;\n        case \"scatter\":\n          this.element = new _chartScatter2.default(this.options).load(this.data).render();\n          break;\n      }\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }], [{\n    key: 'tooltip',\n    value: function tooltip(dataset, value) {\n      return { \"A\": { 'title': 'Dataset', 'text': dataset }, \"B\": { 'title': 'Value', 'text': value } };\n    }\n  }, {\n    key: 'domainRange',\n    value: function domainRange(max) {\n      return Array.from(new Array(max), function (_, i) {\n        return i;\n      }).map(function (x) {\n        return x;\n      });\n    }\n  }, {\n    key: 'colors',\n    get: function get() {\n      return d3.scaleSequential().domain([0, 100]).interpolator(d3.interpolateRainbow);\n    }\n  }]);\n\n  return Chart;\n}(_renderer2.default), (_applyDecoratedDescriptor(_class.prototype, 'render', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'render'), _class.prototype)), _class));\nexports.default = Chart;\n\n},{\"../decorator/data\":2,\"./chart-bar\":7,\"./chart-line\":8,\"./chart-scatter\":9,\"./renderer\":22}],11:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Composite = function (_Renderer) {\n  _inherits(Composite, _Renderer);\n\n  function Composite(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Composite);\n\n    var _this = _possibleConstructorReturn(this, (Composite.__proto__ || Object.getPrototypeOf(Composite)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n\n    if (new.target === Composite) {\n      throw new TypeError('Cannot construct [Composite] instances directly!');\n    }\n    _this.renderers = [];\n    return _this;\n  }\n\n  _createClass(Composite, [{\n    key: 'add',\n    value: function add(renderer) {\n      this.renderers.push(renderer);\n      return this;\n    }\n  }, {\n    key: 'renderChildren',\n    value: function renderChildren() {\n      // update children rendering with a new parent!\n      var options = this.options;\n      options.appendTo = this;\n      // render other components\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.renderers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var renderer = _step.value;\n\n          renderer.settings(options).load(this.data).render();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return Composite;\n}(_renderer2.default);\n\nexports.default = Composite;\n\n},{\"./renderer\":22}],12:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dec, _desc, _value, _class;\n\nvar _composite = require('./composite');\n\nvar _composite2 = _interopRequireDefault(_composite);\n\nvar _canvas = require('./canvas');\n\nvar _canvas2 = _interopRequireDefault(_canvas);\n\nvar _menuMain = require('./menu-main');\n\nvar _menuMain2 = _interopRequireDefault(_menuMain);\n\nvar _message = require('./message');\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _data = require('../decorator/data');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/* global d3 */\n\nvar Frame = (_dec = (0, _data.requires)('canvas'), (_class = function (_Composite) {\n  _inherits(Frame, _Composite);\n\n  function Frame(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Frame);\n\n    var _this = _possibleConstructorReturn(this, (Frame.__proto__ || Object.getPrototypeOf(Frame)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n\n    _this.canvas = new _canvas2.default(_this.options);\n    _this.menu = new _menuMain2.default(_this.options);\n    _this.messages = new _message2.default(_this.options);\n    _this.add(_this.messages).add(_this.menu).add(_this.canvas);\n    return _this;\n  }\n\n  _createClass(Frame, [{\n    key: 'render',\n    value: function render() {\n      var parent = d3.select(this.options.appendTo);\n\n      var frameId = 'Frame-' + this.data.canvas.id;\n      this.element = d3.select('div#' + frameId);\n      // check if the canvas is already present\n      if (!this.element.node()) {\n        // create a svg element detached from the DOM!\n        this.logger.debug('Creating Frame [' + frameId + ']...');\n        this.element = parent.append('div').attr('class', 'francy').attr('id', frameId);\n      }\n\n      // cannot continue if canvas is not present\n      if (!this.element.node()) {\n        throw new Error('Oops, could not create frame with id [' + frameId + ']... Cannot proceed.');\n      }\n\n      this.logger.debug('Frame updated [' + frameId + ']...');\n\n      this.renderChildren();\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }]);\n\n  return Frame;\n}(_composite2.default), (_applyDecoratedDescriptor(_class.prototype, 'render', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'render'), _class.prototype)), _class));\nexports.default = Frame;\n\n},{\"../decorator/data\":2,\"./canvas\":6,\"./composite\":11,\"./menu-main\":17,\"./message\":19}],13:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _graph = require('./graph');\n\nvar _graph2 = _interopRequireDefault(_graph);\n\nvar _component = require('../util/component');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* global d3 */\n\nvar GenericGraph = function (_Renderer) {\n  _inherits(GenericGraph, _Renderer);\n\n  function GenericGraph(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, GenericGraph);\n\n    return _possibleConstructorReturn(this, (GenericGraph.__proto__ || Object.getPrototypeOf(GenericGraph)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(GenericGraph, [{\n    key: 'render',\n    value: function render() {\n\n      var parent = this.options.appendTo.element;\n\n      var simulationActive = this.data.canvas.graph.simulation;\n\n      var canvasNodes = this.data.canvas.graph.nodes ? Object.values(this.data.canvas.graph.nodes) : [],\n          canvasLinks = this.data.canvas.graph.links ? Object.values(this.data.canvas.graph.links) : [];\n\n      this.element = parent.select('g.francy-content');\n\n      var width = +parent.attr('width') || d3.select('body').node().getBoundingClientRect().width,\n          height = +parent.attr('height') || d3.select('body').node().getBoundingClientRect().height;\n\n      var linkGroup = this.element.selectAll('g.francy-links');\n\n      if (!linkGroup.node()) {\n        linkGroup = this.element.append('g').attr('class', 'francy-links');\n      }\n\n      var links = linkGroup.selectAll('g.francy-link').data();\n      var linksToAdd = [];\n      canvasLinks.forEach(function (l) {\n        var link = links.find(function (d) {\n          return d.id === l.id;\n        });\n        if (link) {\n          linksToAdd.push(link);\n        } else {\n          linksToAdd.push(l);\n        }\n      });\n\n      var link = linkGroup.selectAll('g.francy-link').data(linksToAdd, function (d) {\n        return d.id;\n      });\n\n      var nodeGroup = this.element.selectAll('g.francy-nodes');\n\n      if (!nodeGroup.node()) {\n        nodeGroup = this.element.append('g').attr('class', 'francy-nodes');\n      }\n\n      var nodes = nodeGroup.selectAll('g.francy-node').data();\n      var nodesToAdd = [];\n      canvasNodes.forEach(function (n) {\n        var node = nodes.find(function (d) {\n          return d.id === n.id;\n        });\n        if (node) {\n          nodesToAdd.push(node);\n        } else {\n          nodesToAdd.push(n);\n        }\n      });\n\n      var node = nodeGroup.selectAll('g.francy-node').data(nodesToAdd, function (d) {\n        return d.id;\n      });\n\n      if (node.exit().data().length == 0 && node.enter().data().length == 0 && link.enter().data().length == 0 && link.exit().data().length == 0) {\n        return;\n      }\n\n      var linkEnter = link.enter().append('g').attr('class', 'francy-link');\n\n      linkEnter.append('line').attr('class', 'francy-edge');\n\n      link.exit().remove();\n\n      link = linkGroup.selectAll('g.francy-link line.francy-edge');\n\n      if (this.data.canvas.graph.type === 'directed') {\n        // this means we need arrows, so we append the marker\n        parent.append('defs').selectAll('marker').data(['arrow']).enter().append('marker').attr('class', 'francy-arrows').attr('id', function (d) {\n          return d;\n        }).attr('viewBox', '0 -5 10 10').attr('refX', 25).attr('refY', 0).attr('markerWidth', 10).attr('markerHeight', 10).attr('orient', 'auto').append('path').attr('d', 'M0,-5L10,0L0,5 L10,0 L0, -5');\n        // update the style of the link\n        link.style('marker-end', 'url(#arrow)');\n      }\n\n      var nodeEnter = node.enter().append('g').attr('class', 'francy-node').attr('id', function (d) {\n        return d.id;\n      });\n\n      nodeEnter.append('path').attr('d', d3.symbol().type(function (d) {\n        return _graph2.default.getSymbol(d.type);\n      }).size(function (d) {\n        return d.size * 100;\n      })).style('fill', function (d) {\n        return _graph2.default.colors(d.layer * 5);\n      }).attr('class', function (d) {\n        return 'francy-symbol' + (d.highlight ? ' francy-highlight' : '') + (Object.values(d.menus).length ? ' francy-context' : '');\n      });\n\n      nodeEnter.append('text').attr('class', 'francy-label').attr('x', function (d) {\n        return -(d.title.length * 2.5);\n      }).text(function (d) {\n        return d.title;\n      });\n\n      node.exit().remove();\n\n      node = nodeGroup.selectAll('g.francy-node');\n\n      if (this.data.canvas.graph.drag) {\n        node.call(d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended));\n      }\n\n      if (node && !node.empty()) {\n\n        _graph2.default.applyEvents(node, this.options);\n\n        if (this.data.canvas.graph.showNeighbours) {\n          var nodeOnClick = node.on('click');\n          node.on('click', function (d) {\n            // default, highlight connected nodes\n            connectedNodes.call(this);\n            // any callbacks will be handled here\n            nodeOnClick.call(this, d);\n          });\n        }\n      }\n\n      if (simulationActive) {\n        // Canvas Forces\n        var centerForce = d3.forceCenter().x(width / 2).y(height / 2);\n        var manyForce = d3.forceManyBody().strength(-canvasNodes.length * 50);\n        var linkForce = d3.forceLink(canvasLinks).id(function (d) {\n          return d.id;\n        }).distance(50);\n        var collideForce = d3.forceCollide(function (d) {\n          return d.size * 2;\n        });\n\n        //Generic gravity for the X position\n        var forceX = d3.forceX(width / 2).strength(0.05);\n\n        //Generic gravity for the Y position - undirected/directed graphs fall here\n        var forceY = d3.forceY(height / 2).strength(0.25);\n\n        if (this.data.canvas.graph.type === 'hasse') {\n          //Generic gravity for the X position\n          forceX = d3.forceX(width / 2).strength(0.3);\n          //Strong y positioning based on layer to simulate the hasse diagram\n          forceY = d3.forceY(function (d) {\n            return d.layer * 75;\n          }).strength(0.7);\n        }\n\n        var simulation = d3.forceSimulation().nodes(nodesToAdd).force(\"charge\", manyForce).force(\"link\", linkForce).force(\"center\", centerForce).force(\"x\", forceX).force(\"y\", forceY).force(\"collide\", collideForce).on('tick', ticked).on(\"end\", function () {\n          // zoom to fit when simulation is over\n          parent.zoomToFit();\n        });\n\n        //force simulation restart\n        simulation.alpha(0.5).restart();\n      } else {\n        // well, simulation is off, apply fixed positions and zoom to fit now\n        ticked();\n        parent.zoomToFit();\n      }\n\n      function ticked() {\n        link.attr('x1', function (d) {\n          return d.source.x;\n        }).attr('y1', function (d) {\n          return d.source.y;\n        }).attr('x2', function (d) {\n          return d.target.x;\n        }).attr('y2', function (d) {\n          return d.target.y;\n        });\n\n        node.attr('transform', function (d) {\n          return 'translate(' + d.x + ',' + d.y + ')';\n        });\n      }\n\n      // HIGHLIGHT\n      //Toggle stores whether the highlighting is on\n      var toggle = 0;\n      //Create an array logging what is connected to what\n      var linkedByIndex = {};\n\n      for (var i = 0; i < canvasNodes.length; i++) {\n        linkedByIndex[i + ',' + i] = 1;\n      }\n\n      canvasLinks.forEach(function (d) {\n        linkedByIndex[d.source.index + ',' + d.target.index] = 1;\n      });\n\n      function connectedNodes() {\n        //This function looks up whether a pair are neighbours\n        function neighboring(a, b) {\n          return linkedByIndex[a.index + ',' + b.index];\n        }\n        d3.event.preventDefault();\n        if (toggle === 0) {\n          //Reduce the opacity of all but the neighbouring nodes\n          var d = d3.select(this).node().__data__;\n          node.style('opacity', function (o) {\n            return neighboring(d, o) || neighboring(o, d) ? 1 : 0.1;\n          });\n          link.style('opacity', function (o) {\n            return d.index === o.source.index || d.index === o.target.index ? 1 : 0.1;\n          });\n          //Reduce the op\n          toggle = 1;\n        } else {\n          //Put them back to opacity=1\n          node.style('opacity', 1);\n          link.style('opacity', 1);\n          toggle = 0;\n        }\n      }\n\n      function dragstarted(d) {\n        if (!d3.event.active && simulationActive) {\n          simulation.alphaTarget(0.01).restart();\n        }\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n\n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n\n      function dragended(d) {\n        if (!d3.event.active && simulationActive) {\n          simulation.alphaTarget(0);\n        }\n        d.fx = null;\n        d.fy = null;\n      }\n\n      (0, _component.RegisterMathJax)(this.SVGParent);\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }]);\n\n  return GenericGraph;\n}(_renderer2.default);\n\nexports.default = GenericGraph;\n\n},{\"../util/component\":24,\"./graph\":15,\"./renderer\":22}],14:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _graph = require('./graph');\n\nvar _graph2 = _interopRequireDefault(_graph);\n\nvar _component = require('../util/component');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* global d3 */\n\nvar TreeGraph = function (_Renderer) {\n  _inherits(TreeGraph, _Renderer);\n\n  function TreeGraph(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, TreeGraph);\n\n    return _possibleConstructorReturn(this, (TreeGraph.__proto__ || Object.getPrototypeOf(TreeGraph)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(TreeGraph, [{\n    key: 'render',\n    value: function render() {\n\n      var parent = this.options.appendTo.element;\n\n      this.element = parent.select('g.francy-content');\n\n      var width = +parent.attr('width') || d3.select('body').node().getBoundingClientRect().width,\n          height = +parent.attr('height') || d3.select('body').node().getBoundingClientRect().height;\n\n      var i = 0,\n          root;\n\n      root = d3.hierarchy(this.treeData, function (d) {\n        return d.children;\n      });\n      root.x0 = height / 2;\n      root.y0 = 0;\n\n      // compute height based on the depth of the graph\n      var levelWidth = [1];\n      var childCount = function childCount(level, n) {\n\n        if (n.children && n.children.length > 0) {\n          if (levelWidth.length <= level + 1) levelWidth.push(0);\n\n          levelWidth[level + 1] += n.children.length;\n          n.children.forEach(function (d) {\n            childCount(level + 1, d);\n          });\n        }\n      };\n      childCount(0, root);\n      var newHeight = d3.max(levelWidth) * 100;\n\n      var treemap = d3.tree().size([newHeight, width]);\n\n      if (this.data.canvas.graph.collapsed) {\n        root.children.forEach(collapse);\n      }\n\n      update.call(this, root);\n\n      function collapse(d) {\n        if (d.children) {\n          d._children = d.children;\n          d._children.forEach(collapse);\n          d.children = null;\n        }\n      }\n\n      function update(source) {\n        var _this2 = this;\n\n        var treeData = treemap(root);\n\n        var nodes = treeData.descendants(),\n            links = treeData.descendants().slice(1);\n\n        nodes.forEach(function (d) {\n          return d.y = d.depth * 180;\n        });\n\n        var linkGroup = this.element.selectAll('g.francy-links');\n\n        if (!linkGroup.node()) {\n          linkGroup = this.element.append('g').attr('class', 'francy-links');\n        }\n\n        var link = linkGroup.selectAll('path.francy-edge').data(links, function (d) {\n          return d.id || (d.id = ++i);\n        });\n\n        var linkEnter = link.enter().append('path').attr('class', 'francy-edge').attr('d', function () {\n          var o = { x: source.x0, y: source.y0 };\n          return diagonal(o, o);\n        });\n\n        linkEnter.merge(link).transition().duration(this.transitionDuration).attr('d', function (d) {\n          return diagonal(d, d.parent);\n        });\n\n        link.exit().transition().duration(this.transitionDuration).attr('d', function () {\n          var o = { x: source.x, y: source.y };\n          return diagonal(o, o);\n        }).remove();\n\n        linkGroup.selectAll('path.francy-edge').style('fill', 'none').style('stroke', '#ccc').style('stroke-width', '1px');\n\n        nodes.forEach(function (d) {\n          d.x0 = d.x;\n          d.y0 = d.y;\n        });\n\n        function diagonal(s, d) {\n          return 'M ' + s.y + ' ' + s.x + '\\n            C ' + (s.y + d.y) / 2 + ' ' + s.x + ',\\n              ' + (s.y + d.y) / 2 + ' ' + d.x + ',\\n              ' + d.y + ' ' + d.x;\n        }\n\n        var nodeGroup = this.element.selectAll('g.francy-nodes');\n\n        if (!nodeGroup.node()) {\n          nodeGroup = this.element.append('g').attr('class', 'francy-nodes');\n        }\n\n        var node = nodeGroup.selectAll('g.francy-node').data(nodes, function (d) {\n          return d.id || (d.id = ++i);\n        });\n\n        var nodeEnter = node.enter().append('g').attr('class', 'francy-node').attr('transform', function () {\n          return 'translate(' + source.y0 + ',' + source.x0 + ')';\n        });\n\n        nodeEnter.append('path').attr('d', d3.symbol().type(function (d) {\n          return _graph2.default.getSymbol(d.data.type);\n        }).size(function (d) {\n          return d.data.size * 100;\n        })).attr('class', 'francy-symbol');\n\n        nodeEnter.append('text').attr('class', 'francy-label').attr('x', function (d) {\n          return -(d.data.title.length * 2.5);\n        }).style('cursor', function (d) {\n          return d.children || d._children ? 'pointer' : 'default';\n        }).text(function (d) {\n          return d.data.title;\n        });\n\n        var nodeUpdate = nodeEnter.merge(node);\n\n        nodeUpdate.transition().duration(this.transitionDuration).attr('transform', function (d) {\n          return 'translate(' + d.y + ',' + d.x + ')';\n        });\n\n        node.exit().transition().duration(this.transitionDuration).attr('transform', function () {\n          return 'translate(' + source.y + ',' + source.x + ')';\n        }).remove();\n\n        nodeGroup.selectAll('path.francy-symbol').style('fill', function (d) {\n          return d.children || d._children ? 'lightsteelblue' : _graph2.default.colors(d.data.layer * 5);\n        }).style('cursor', function (d) {\n          return d.children || d._children ? 'pointer' : 'default';\n        });\n\n        node = nodeGroup.selectAll('g.francy-node');\n        _graph2.default.applyEvents(node, this.options);\n\n        var nodeOnClick = node.on('click');\n        node.on('click', function (d) {\n          // any callbacks will be handled here\n          nodeOnClick.call(_this2, d.data);\n          // default, highlight connected nodes\n          click.call(_this2, d);\n        });\n\n        // Toggle children on click.\n        var self = this;\n\n        function click(d) {\n          if (d.children) {\n            d._children = d.children;\n            d.children = null;\n          } else {\n            d.children = d._children;\n            d._children = null;\n          }\n          update.call(self, d);\n        }\n\n        (0, _component.RegisterMathJax)(this.SVGParent);\n\n        setTimeout(function () {\n          parent.zoomToFit();\n        }, this.transitionDuration);\n      }\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n\n    /**\n     * Transforms flat data into tree data by analysing the parents of each node\n     * @returns {Object} the data transformed in tree data\n     */\n\n  }, {\n    key: 'treeData',\n    get: function get() {\n      var canvasNodes = this.data.canvas.graph.nodes ? Object.values(this.data.canvas.graph.nodes) : [];\n      var dataMap = canvasNodes.reduce(function (map, node) {\n        map[node.id] = node;\n        return map;\n      }, {});\n      var treeData = [];\n      canvasNodes.forEach(function (node) {\n        var parent = dataMap[node.parent];\n        if (parent) {\n          (parent.children || (parent.children = [])).push(node);\n        } else {\n          treeData.push(node);\n        }\n      });\n      return treeData[0];\n    }\n  }]);\n\n  return TreeGraph;\n}(_renderer2.default);\n\nexports.default = TreeGraph;\n\n},{\"../util/component\":24,\"./graph\":15,\"./renderer\":22}],15:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dec, _desc, _value, _class;\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _graphTree = require('./graph-tree');\n\nvar _graphTree2 = _interopRequireDefault(_graphTree);\n\nvar _graphGeneric = require('./graph-generic');\n\nvar _graphGeneric2 = _interopRequireDefault(_graphGeneric);\n\nvar _menuContext = require('./menu-context');\n\nvar _menuContext2 = _interopRequireDefault(_menuContext);\n\nvar _tooltip = require('./tooltip');\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _callback = require('./callback');\n\nvar _callback2 = _interopRequireDefault(_callback);\n\nvar _data = require('../decorator/data');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/* global d3 */\n\nvar Graph = (_dec = (0, _data.requires)('canvas.graph'), (_class = function (_Renderer) {\n  _inherits(Graph, _Renderer);\n\n  function Graph(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Graph);\n\n    return _possibleConstructorReturn(this, (Graph.__proto__ || Object.getPrototypeOf(Graph)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(Graph, [{\n    key: 'render',\n    value: function render() {\n\n      var element = undefined;\n      switch (this.data.canvas.graph.type) {\n        case 'tree':\n          element = new _graphTree2.default(this.options).load(this.data).render();\n          break;\n        default:\n          element = new _graphGeneric2.default(this.options).load(this.data).render();\n      }\n\n      return element;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }], [{\n    key: 'applyEvents',\n    value: function applyEvents(element, options) {\n      if (!element) return;\n\n      var tooltip = new _tooltip2.default(options);\n      var contextMenu = new _menuContext2.default(options);\n      var callback = new _callback2.default(options);\n\n      element.on('contextmenu', function (d) {\n        d = d.data || d;\n        // default, build context menu\n        contextMenu.load(d, true).render();\n        // any callbacks will be handled here\n        executeCallback.call(this, d, 'contextmenu');\n      }).on('click', function (d) {\n        d = d.data || d;\n        // any callbacks will be handled here\n        executeCallback.call(this, d, 'click');\n      }).on('dblclick', function (d) {\n        d = d.data || d;\n        // any callbacks will be handled here\n        executeCallback.call(this, d, 'dblclick');\n      }).on('mouseenter', function (d) {\n        d = d.data || d;\n        // default, show tooltip\n        tooltip.load(d.messages, true).render();\n      }).on('mouseleave', function () {\n        // default, hide tooltip\n        tooltip.unrender();\n      });\n\n      function executeCallback(data, event) {\n        if (data.callbacks) {\n          Object.values(data.callbacks).forEach(function (cb) {\n            // execute the ones that match the event!\n            cb.trigger === event && callback.load({ callback: cb }, true).execute();\n          });\n        }\n      }\n    }\n  }, {\n    key: 'getSymbol',\n    value: function getSymbol(type) {\n      if (type === 'circle') {\n        return d3.symbolCircle;\n      } else if (type === 'cross') {\n        return d3.symbolCross;\n      } else if (type === 'diamond') {\n        return d3.symbolDiamond;\n      } else if (type === 'square') {\n        return d3.symbolSquare;\n      } else if (type === 'triangle') {\n        return d3.symbolTriangle;\n      } else if (type === 'star') {\n        return d3.symbolStar;\n      } else if (type === 'wye') {\n        return d3.symbolWye;\n      } else {\n        return d3.symbolCircle;\n      }\n    }\n  }, {\n    key: 'colors',\n    get: function get() {\n      return d3.scaleSequential().domain([0, 100]).interpolator(d3.interpolateRainbow);\n    }\n  }]);\n\n  return Graph;\n}(_renderer2.default), (_applyDecoratedDescriptor(_class.prototype, 'render', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'render'), _class.prototype)), _class));\nexports.default = Graph;\n\n},{\"../decorator/data\":2,\"./callback\":5,\"./graph-generic\":13,\"./graph-tree\":14,\"./menu-context\":16,\"./renderer\":22,\"./tooltip\":23}],16:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dec, _desc, _value, _class;\n\nvar _menu = require('./menu');\n\nvar _menu2 = _interopRequireDefault(_menu);\n\nvar _data = require('../decorator/data');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/* global d3 */\n\nvar ContextMenu = (_dec = (0, _data.requires)('menus'), (_class = function (_Menu) {\n  _inherits(ContextMenu, _Menu);\n\n  function ContextMenu(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, ContextMenu);\n\n    return _possibleConstructorReturn(this, (ContextMenu.__proto__ || Object.getPrototypeOf(ContextMenu)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(ContextMenu, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      d3.event.preventDefault();\n\n      this.element = this.HTMLParent.select('div.francy-context-menu-holder');\n      // check if the window is already present\n      if (!this.element.node()) {\n        this.element = this.HTMLParent.append('div').attr('class', 'francy-context-menu-holder');\n      }\n\n      var pos = d3.mouse(this.SVGParent.node());\n\n      this.element.style('left', pos[0] + 5 + 'px').style('top', pos[1] + 5 + 'px');\n\n      // show the context menu\n      this.element.style('display', 'block');\n\n      // check if it exists already\n      if (this.element.selectAll('*').node()) {\n        return;\n      }\n\n      // destroy menu\n      d3.select('body').on('click.francy-context-menu', function () {\n        return _this2.unrender();\n      });\n\n      // this gets executed when a contextmenu event occurs\n      var menu = this.element.append('div').attr('class', 'francy-context-menu').append('ul');\n      var menusIterator = this.iterator(Object.values(this.data.menus));\n      this.traverse(menu, menusIterator);\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {\n      if (this.element) {\n        this.element.selectAll('*').remove();\n        this.element.style('display', null);\n      }\n    }\n  }]);\n\n  return ContextMenu;\n}(_menu2.default), (_applyDecoratedDescriptor(_class.prototype, 'render', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'render'), _class.prototype)), _class));\nexports.default = ContextMenu;\n\n},{\"../decorator/data\":2,\"./menu\":18}],17:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _menu = require('./menu');\n\nvar _menu2 = _interopRequireDefault(_menu);\n\nvar _modalAbout = require('./modal-about');\n\nvar _modalAbout2 = _interopRequireDefault(_modalAbout);\n\nvar _saveSvgAsPng = require('../../node_modules/save-svg-as-png/saveSvgAsPng');\n\nvar SvgToPng = _interopRequireWildcard(_saveSvgAsPng);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* global d3 window */\n\nvar MainMenu = function (_Menu) {\n  _inherits(MainMenu, _Menu);\n\n  function MainMenu(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, MainMenu);\n\n    return _possibleConstructorReturn(this, (MainMenu.__proto__ || Object.getPrototypeOf(MainMenu)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(MainMenu, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var parent = this.options.appendTo.element;\n\n      var aboutModal = new _modalAbout2.default(this.options);\n\n      // Otherwise clashes with the canvas itself!\n      var menuId = 'MainMenu-' + this.data.canvas.id;\n      this.element = d3.select('#' + menuId);\n\n      // Check if the menu is already present\n      if (!this.element.node()) {\n        // create a div element detached from the DOM!\n        this.logger.debug('Creating Main Menu [' + menuId + ']...');\n        this.element = parent.append('div').attr('class', 'francy-main-menu-holder').attr('id', menuId);\n      }\n\n      // Force rebuild menu again\n      this.element.selectAll('*').remove();\n\n      this.element = this.element.append('ul').attr('class', 'francy-main-menu');\n\n      if (this.data.canvas.title) {\n        this.element.append('li').attr('class', 'francy-title').append('a').html(this.data.canvas.title);\n      }\n\n      var entry = this.element.append('li');\n      entry.append('a').html('Francy');\n      var content = entry.append('ul');\n      content.append('li').append('a').on('click', function () {\n        return _this2.options.appendTo.canvas.zoomToFit();\n      }).attr('title', 'Zoom to Fit').html('Zoom to Fit');\n      content.append('li').append('a').on('click', function () {\n        return SvgToPng.saveSvgAsPng(_this2.SVGParent.node(), \"diagram.png\");\n      }).attr('title', 'Save to PNG').html('Save to PNG');\n      content.append('li').append('a').on('click', function () {\n        return aboutModal.load(_this2.data).render();\n      }).attr('title', 'About').html('About');\n\n      // Traverse all menus and flatten them!\n      var menusIterator = this.iterator(Object.values(this.data.canvas.menus));\n      this.traverse(this.element, menusIterator);\n\n      this.logger.debug('Main Menu updated [' + menuId + ']...');\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }]);\n\n  return MainMenu;\n}(_menu2.default);\n\nexports.default = MainMenu;\n\n},{\"../../node_modules/save-svg-as-png/saveSvgAsPng\":1,\"./menu\":18,\"./modal-about\":20}],18:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _callback = require('./callback');\n\nvar _callback2 = _interopRequireDefault(_callback);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Menu = function (_Renderer) {\n  _inherits(Menu, _Renderer);\n\n  function Menu(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Menu);\n\n    return _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(Menu, [{\n    key: 'traverse',\n    value: function traverse(appendTo, menusIterator) {\n      var _this2 = this;\n\n      while (menusIterator.hasNext()) {\n        var menuItem = menusIterator.next();\n        var entry = appendTo.append('li');\n        var action = entry.selectAll('a').data([menuItem]).enter().append('a').attr('title', menuItem.title).html(menuItem.title);\n        if (menuItem.callback && Object.values(menuItem.callback).length) {\n          action.on('click', function (d) {\n            return new _callback2.default(_this2.options).load(d, true).execute();\n          });\n        }\n        if (menuItem.menus && Object.values(menuItem.menus).length > 0) {\n          var content = entry.append('ul');\n          var subMenusIterator = this.iterator(Object.values(menuItem.menus));\n          this.traverse(content, subMenusIterator);\n        }\n      }\n    }\n  }, {\n    key: 'iterator',\n    value: function iterator(array) {\n      var nextIndex = 0;\n      return {\n        next: function next() {\n          return this.hasNext() ? array[nextIndex++] : undefined;\n        },\n        hasNext: function hasNext() {\n          return nextIndex < array.length;\n        }\n      };\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }]);\n\n  return Menu;\n}(_renderer2.default);\n\nexports.default = Menu;\n\n},{\"./callback\":5,\"./renderer\":22}],19:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dec, _desc, _value, _class;\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _data = require('../decorator/data');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/* global d3 */\n\nvar Message = (_dec = (0, _data.requires)('canvas.messages'), (_class = function (_Renderer) {\n  _inherits(Message, _Renderer);\n\n  function Message(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Message);\n\n    return _possibleConstructorReturn(this, (Message.__proto__ || Object.getPrototypeOf(Message)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(Message, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var parent = this.options.appendTo.element;\n\n      var messages = Object.keys(this.data.canvas.messages).map(function (key) {\n        return {\n          id: key,\n          type: _this2.data.canvas.messages[key].type,\n          title: _this2.data.canvas.messages[key].title,\n          text: _this2.data.canvas.messages[key].text\n        };\n      });\n\n      var alertsId = 'Messages-' + this.data.canvas.id;\n      this.element = d3.select('#' + alertsId);\n      // check if the div is already present\n      if (!this.element.node()) {\n        this.element = parent.append('div').attr('class', 'francy-message-holder').attr('id', alertsId);\n      }\n\n      var message = this.element.selectAll('div.francy-alert').data(messages, function (d) {\n        return d.id;\n      });\n      var messageEnter = message.enter().append('div').attr('id', function (d) {\n        return d.id;\n      }).attr('class', function (d) {\n        return 'francy-alert alert-' + d.type;\n      }).on('click', function () {\n        d3.select(this).style('display', 'none');\n      });\n      messageEnter.append('span').attr('class', 'strong').text(function (d) {\n        return d.title;\n      });\n      messageEnter.append('span').text(function (d) {\n        return d.text;\n      });\n      messageEnter.append('span').attr('class', 'strong').style('display', 'none').text(\"x\");\n\n      messageEnter.merge(message);\n\n      message.exit().remove();\n\n      this.element.style('display', 'block');\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }]);\n\n  return Message;\n}(_renderer2.default), (_applyDecoratedDescriptor(_class.prototype, 'render', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'render'), _class.prototype)), _class));\nexports.default = Message;\n\n},{\"../decorator/data\":2,\"./renderer\":22}],20:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _component = require('../util/component');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* global d3 */\n\nvar AboutModal = function (_Renderer) {\n  _inherits(AboutModal, _Renderer);\n\n  function AboutModal(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, AboutModal);\n\n    return _possibleConstructorReturn(this, (AboutModal.__proto__ || Object.getPrototypeOf(AboutModal)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(AboutModal, [{\n    key: 'render',\n    value: function render() {\n      var self = this;\n\n      var modalId = 'AboutModalWindow';\n\n      this.logger.debug('Creating About Modal [' + modalId + ']...');\n\n      // we want to overlay everything, hence 'body' must be used\n      var overlay = d3.select('body').append('div').attr('class', 'francy-overlay');\n      var holder = d3.select('body').append('div').attr('class', 'francy');\n      this.element = holder.append('div').attr('id', modalId).attr('class', 'francy-modal');\n\n      var form = this.element.append('form');\n\n      var header = form.append('div').attr('class', 'francy-modal-header');\n\n      header.append('span').html('About Francy v' + (this.data.version || 'N/A'));\n\n      var content = form.append('div').attr('class', 'francy-modal-content').append('div').attr('class', 'francy-table').append('div').attr('class', 'francy-table-body');\n\n      content.append('span').text('Loaded Object:');\n      content.append('pre').attr('class', 'francy').html(this.syntaxHighlight(JSON.stringify(this.data.canvas, null, 2)));\n      content.append('span').append('a').attr('href', 'https://github.com/mcmartins/francy').text('Francy on Github');\n\n      var footer = form.append('div').attr('class', 'francy-modal-footer');\n\n      footer.append('button').text('Ok').on('click', function () {\n        overlay.remove();\n        self.element.remove();\n        holder.remove();\n        d3.event.preventDefault();\n        return false;\n      });\n\n      // disable keyboard shortcuts when using this modal in Jupyter\n      (0, _component.RegisterJupyterKeyboardEvents)(['.francy', '.francy-arg', '.francy-overlay', '.francy-modal']);\n\n      this.logger.debug('Callback About updated [' + modalId + ']...');\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n\n    // credits here: https://stackoverflow.com/questions/4810841/how-can-i-pretty-print-json-using-javascript#answer-7220510\n\n  }, {\n    key: 'syntaxHighlight',\n    value: function syntaxHighlight(json) {\n      json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n      return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g, function (match) {\n        var cls = 'number';\n        if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n            cls = 'key';\n          } else {\n            cls = 'string';\n          }\n        } else if (/true|false/.test(match)) {\n          cls = 'boolean';\n        } else if (/null/.test(match)) {\n          cls = 'null';\n        }\n        return '<span class=\"' + cls + '\">' + match + '</span>';\n      });\n    }\n  }]);\n\n  return AboutModal;\n}(_renderer2.default);\n\nexports.default = AboutModal;\n\n},{\"../util/component\":24,\"./renderer\":22}],21:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _component = require('../util/component');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* global d3 */\n\nvar RequiredArgsModal = function (_Renderer) {\n  _inherits(RequiredArgsModal, _Renderer);\n\n  function RequiredArgsModal(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, RequiredArgsModal);\n\n    return _possibleConstructorReturn(this, (RequiredArgsModal.__proto__ || Object.getPrototypeOf(RequiredArgsModal)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(RequiredArgsModal, [{\n    key: 'render',\n    value: function render() {\n      var self = this;\n\n      var modalId = this.data.callback.id;\n\n      this.logger.debug('Creating Callback Modal [' + modalId + ']...');\n\n      // we want to overlay everything, hence 'body' must be used\n      var overlay = d3.select('body').append('div').attr('class', 'francy-overlay');\n      var holder = d3.select('body').append('div').attr('class', 'francy');\n      this.element = holder.append('div').attr('id', modalId).attr('class', 'francy-modal');\n\n      var form = this.element.append('form');\n\n      var header = form.append('div').attr('class', 'francy-modal-header');\n\n      var headerTitle = header.append('span').html('Required arguments&nbsp;');\n      if (this.data.title) {\n        headerTitle.append('span').attr('style', 'font-weight: bold;').text('for ' + this.data.title);\n      }\n\n      var content = form.append('div').attr('class', 'francy-modal-content').append('div').attr('class', 'francy-table').append('div').attr('class', 'francy-table-body');\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = Object.values(this.data.callback.requiredArgs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var arg = _step.value;\n\n          var row = content.append('div').attr('class', 'francy-table-row');\n          row.append('div').attr('class', 'francy-table-cell').append('label').attr('for', arg.id).text(arg.title);\n          var input = row.append('div').attr('class', 'francy-table-cell').append('input').attr('id', arg.id).attr('class', 'francy-arg').attr('required', '').attr('name', arg.id).attr('type', arg.type).attr('value', arg.value).on('change', function () {\n            self.data.callback.requiredArgs[this.id].value = this.value;\n          }).on('input', this.onchange).on('keyup', this.onchange).on('paste', this.onchange);\n          // wait, if it is boolean we create a checkbox\n          if (arg.type === 'boolean') {\n            // well, a checkbox works this way so we need to initialize \n            // the value to false and update the value based on the checked \n            // property that triggers the onchange event\n            arg.value = arg.value || false;\n            input.attr('type', 'checkbox').attr('required', null).attr('value', arg.value).on('change', function () {\n              self.data.callback.requiredArgs[this.id].value = this.value = this.checked;\n            });\n          }\n          row.append('span').attr('class', 'validity');\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var footer = form.append('div').attr('class', 'francy-modal-footer');\n\n      footer.append('button').text('Ok').on('click', function () {\n        if (form.node().checkValidity()) {\n          d3.event.preventDefault();\n          self.options.callbackHandler(self.data.callback);\n          overlay.remove();\n          self.element.remove();\n          holder.remove();\n        }\n        return false;\n      });\n      footer.append('button').text('Cancel').on('click', function () {\n        overlay.remove();\n        self.element.remove();\n        holder.remove();\n        d3.event.preventDefault();\n        return false;\n      });\n\n      // disable keyboard shortcuts when using this modal in Jupyter\n      (0, _component.RegisterJupyterKeyboardEvents)(['.francy', '.francy-arg', '.francy-overlay', '.francy-modal']);\n\n      content.selectAll('.francy-arg').node().focus();\n\n      this.logger.debug('Callback Modal updated [' + modalId + ']...');\n\n      return this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {}\n  }]);\n\n  return RequiredArgsModal;\n}(_renderer2.default);\n\nexports.default = RequiredArgsModal;\n\n},{\"../util/component\":24,\"./renderer\":22}],22:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* global d3 */\n\nvar Renderer = function (_Base) {\n  _inherits(Renderer, _Base);\n\n  function Renderer(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Renderer);\n\n    var _this = _possibleConstructorReturn(this, (Renderer.__proto__ || Object.getPrototypeOf(Renderer)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n\n    if (new.target === Renderer) {\n      throw new TypeError('Cannot construct [Renderer] instances directly!');\n    }\n    if (_this.render === undefined || typeof _this.render !== 'function') {\n      throw new TypeError('Must override [render()] method!');\n    }\n    if (_this.unrender === undefined) {\n      _this.logger.debug('No [unrender()] method specified...');\n    }\n    _this.element = undefined;\n    _this.transitionDuration = 750; //ms\n    return _this;\n  }\n\n  _createClass(Renderer, [{\n    key: 'HTMLParent',\n    get: function get() {\n      return this.options.appendTo.element.node().tagName.toLowerCase() === 'svg' ? d3.select(this.options.appendTo.element.node().parentNode) : this.options.appendTo.element;\n    }\n  }, {\n    key: 'SVGParent',\n    get: function get() {\n      return this.options.appendTo.element.node().tagName.toLowerCase() === 'div' ? this.options.appendTo.element.select('svg') : this.options.appendTo.element;\n    }\n  }]);\n\n  return Renderer;\n}(_base2.default);\n\nexports.default = Renderer;\n\n},{\"./base\":4}],23:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dec, _desc, _value, _class;\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _data = require('../decorator/data');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/* global d3 */\n\nvar Tooltip = (_dec = (0, _data.requires)(), (_class = function (_Renderer) {\n  _inherits(Tooltip, _Renderer);\n\n  function Tooltip(_ref) {\n    var _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose,\n        appendTo = _ref.appendTo,\n        callbackHandler = _ref.callbackHandler;\n\n    _classCallCheck(this, Tooltip);\n\n    return _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, { verbose: verbose, appendTo: appendTo, callbackHandler: callbackHandler }));\n  }\n\n  _createClass(Tooltip, [{\n    key: 'render',\n    value: function render() {\n\n      this.element = this.HTMLParent.select('div.francy-tooltip-holder');\n      // check if the window is already present\n      if (!this.element.node()) {\n        this.element = this.HTMLParent.append('div').attr('class', 'francy-tooltip-holder');\n      }\n\n      // check if it exists already\n      if (this.element.selectAll('*').node()) {\n        return;\n      }\n\n      var pos = d3.mouse(this.SVGParent.node());\n\n      // TODO fix always visible tooltip, fine until someone complains about :P\n      this.element.style('left', pos[0] + 5 + 'px').style('top', pos[1] - 5 + 'px');\n\n      var table = this.element.append('div').attr('class', 'francy-tooltip').append('div').attr('class', 'francy-table').append('div').attr('class', 'francy-table-body');\n      var self = this;\n      Object.keys(this.data).map(function (key) {\n        var row = table.append('div').attr('class', 'francy-table-row');\n        row.append('div').attr('class', 'francy-table-cell').text(self.data[key].title);\n        row.append('div').attr('class', 'francy-table-cell').text(self.data[key].text);\n      });\n\n      // show tooltip\n      this.element.style('display', 'block');\n\n      this;\n    }\n  }, {\n    key: 'unrender',\n    value: function unrender() {\n      if (this.element) {\n        this.element.selectAll('*').remove();\n        this.element.style('display', null);\n      }\n    }\n  }]);\n\n  return Tooltip;\n}(_renderer2.default), (_applyDecoratedDescriptor(_class.prototype, 'render', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'render'), _class.prototype)), _class));\nexports.default = Tooltip;\n\n},{\"../decorator/data\":2,\"./renderer\":22}],24:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegisterMathJax = RegisterMathJax;\nexports.RegisterJupyterKeyboardEvents = RegisterJupyterKeyboardEvents;\n\nvar _logger = require(\"../util/logger\");\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* global Jupyter, MathJax, d3 */\n\nfunction RegisterMathJax(element) {\n  if (!element) return;\n  setTimeout(function () {\n    try {\n      MathJax.Hub.Config({\n        extensions: [\"tex2jax.js\"],\n        jax: [\"input/TeX\", \"output/SVG\"],\n        tex2jax: {\n          inlineMath: [['$', '$'], [\"\\\\(\", \"\\\\)\"]],\n          displayMath: [['$$', '$$'], [\"\\\\[\", \"\\\\]\"]],\n          processEscapes: true\n        },\n        skipStartupTypeset: true\n      });\n\n      MathJax.Hub.Register.StartupHook('End', function () {\n        setTimeout(function () {\n          element.selectAll('.francy-label').each(function () {\n            var self = d3.select(this),\n                mathJax = self.select('text>span>svg');\n            if (mathJax.node()) {\n              setTimeout(function () {\n                mathJax.attr('x', self.attr('x'));\n                mathJax.attr('y', -15);\n                d3.select(self.node().parentNode).append(function () {\n                  return mathJax.node();\n                });\n                self.selectAll('*').remove();\n              }, 10);\n            }\n          });\n        }, 250);\n      });\n\n      MathJax.Hub.Queue([\"setRenderer\", MathJax.Hub, \"SVG\"], ['Typeset', MathJax.Hub, element.node()]);\n\n      MathJax.Hub.Configured();\n    } catch (e) {\n      if (e.name == 'ReferenceError') {\n        new _logger2.default().info('It seems MathJax is not loaded...', e);\n      }\n    }\n  }, 10);\n}\n\nfunction RegisterJupyterKeyboardEvents(classes) {\n  // disable keyboard shortcuts in Jupyter for classes\n  if (!classes) return;\n  try {\n    classes.map(function (cl) {\n      Jupyter.keyboard_manager.register_events(cl);\n    });\n  } catch (e) {\n    if (e.name == 'ReferenceError') {\n      new _logger2.default().info('It seems we\\'re not running on Jupyter...', e);\n    }\n  }\n}\n\n},{\"../util/logger\":26}],25:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This class contains methods to deal with JSON.\n */\nvar JsonUtils = function () {\n  function JsonUtils() {\n    _classCallCheck(this, JsonUtils);\n  }\n\n  _createClass(JsonUtils, null, [{\n    key: 'parse',\n\n\n    /**\n     * Parses an input nd checks whether this input is valid and returns a JSON object.\n     * @param input - the input to parse\n     * @returns {json} - if the input is a valid JSON object, otherwise returns {undefined}\n     */\n    value: function parse(input, partial) {\n      if (!input) return;\n      input = typeof input !== \"string\" ? JSON.stringify(input) : input;\n      input = input.replace(/[\\n\\r\\b\\\\]+|(gap>)/g, '');\n      var jsonRegex = /{(?:[^])*}/g;\n      var match = jsonRegex.exec(input);\n      if (match) {\n        input = match[0];\n        try {\n          var json = JSON.parse(input);\n          return json.mime === JsonUtils.MIME || partial ? json : undefined;\n        } catch (e) {\n          /* eslint-disable no-console */\n          console.error(e);\n          /* eslint-enable no-console */\n        }\n      }\n      return;\n    }\n  }, {\n    key: 'MIME',\n    get: function get() {\n      return 'application/vnd.francy+json';\n    }\n  }]);\n\n  return JsonUtils;\n}();\n\nexports.default = JsonUtils;\n\n},{}],26:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This class is a singleton that provides a logger for the Francy application.\n */\nvar Logger = function () {\n\n  /**\n   * Singleton: Creates an instance of the logger and will returned that instance,\n   * everytime a new instance is requested.\n   * @param verbose prints extra log information to console.log, default false\n   */\n  function Logger() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose;\n\n    _classCallCheck(this, Logger);\n\n    this.verbose = verbose;\n    this.console = console;\n  }\n\n  /**\n   * Creates a [DEBUG] entry in the console log\n   * @param message the message to print\n   */\n\n\n  _createClass(Logger, [{\n    key: 'debug',\n    value: function debug(message) {\n      if (this.verbose) {\n        this.console.debug(this._format('DEBUG', message));\n      }\n    }\n\n    /**\n     * Creates a [INFO] entry in the console log\n     * @param message the message to print\n     */\n\n  }, {\n    key: 'info',\n    value: function info(message) {\n      this.console.info(this._format('INFO', message));\n    }\n\n    /**\n     * Creates a [ERROR] entry in the console log\n     * @param message the message to print\n     * @param error the error Object to attach to the message\n     */\n\n  }, {\n    key: 'error',\n    value: function error(message, _error) {\n      this.console.error(this._format('ERROR', message), _error);\n    }\n\n    /**\n     * Creates a [WARN] entry in the console log\n     * @param message the message to print\n     * @param error the error Object to attach to the message\n     */\n\n  }, {\n    key: 'warn',\n    value: function warn(message, error) {\n      error = error || {};\n      this.console.error(this._format('WARN', message), error);\n    }\n\n    /**\n     * This is a private method that formats all log messages\n     * @param message the message to print\n     */\n\n  }, {\n    key: '_format',\n    value: function _format(level, message) {\n      return '[' + level + '] - ' + new Date().toISOString() + ' - ' + message;\n    }\n  }]);\n\n  return Logger;\n}();\n\nexports.default = Logger;\n\n},{}]},{},[3])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"file":"../francy.bundle.js"}